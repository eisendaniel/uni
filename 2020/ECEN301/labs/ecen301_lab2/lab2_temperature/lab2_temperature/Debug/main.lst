                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.8.0 #10562 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _Sample_ADC
                                     13 	.globl _movingAvg
                                     14 	.globl _sprintf
                                     15 	.globl _clearLCD
                                     16 	.globl _writeLineLCD
                                     17 	.globl _initLCD
                                     18 	.globl _delay
                                     19 	.globl _PADCL
                                     20 	.globl _B7
                                     21 	.globl _B6
                                     22 	.globl _B5
                                     23 	.globl _B4
                                     24 	.globl _B3
                                     25 	.globl _B2
                                     26 	.globl _B1
                                     27 	.globl _B0
                                     28 	.globl _ESPI
                                     29 	.globl _EADC
                                     30 	.globl _A7
                                     31 	.globl _A6
                                     32 	.globl _A5
                                     33 	.globl _A4
                                     34 	.globl _A3
                                     35 	.globl _A2
                                     36 	.globl _A1
                                     37 	.globl _A0
                                     38 	.globl _ACC7
                                     39 	.globl _ACC6
                                     40 	.globl _ACC5
                                     41 	.globl _ACC4
                                     42 	.globl _ACC3
                                     43 	.globl _ACC2
                                     44 	.globl _ACC1
                                     45 	.globl _ACC0
                                     46 	.globl _CF
                                     47 	.globl _CR
                                     48 	.globl _CCF4
                                     49 	.globl _CCF3
                                     50 	.globl _CCF2
                                     51 	.globl _CCF1
                                     52 	.globl _CCF0
                                     53 	.globl _CY
                                     54 	.globl _AC
                                     55 	.globl _F0
                                     56 	.globl _RS1
                                     57 	.globl _RS0
                                     58 	.globl _OV
                                     59 	.globl _F1
                                     60 	.globl _P
                                     61 	.globl _TF2
                                     62 	.globl _EXF2
                                     63 	.globl _RCLK
                                     64 	.globl _TCLK
                                     65 	.globl _EXEN2
                                     66 	.globl _TR2
                                     67 	.globl _CT2
                                     68 	.globl _CPRL2
                                     69 	.globl _MOSI
                                     70 	.globl _SCK
                                     71 	.globl _MISO
                                     72 	.globl _P4_4
                                     73 	.globl _P4_3
                                     74 	.globl _P4_2
                                     75 	.globl _P4_1
                                     76 	.globl _P4_0
                                     77 	.globl _PPC
                                     78 	.globl _PT2
                                     79 	.globl _PS
                                     80 	.globl _PT1
                                     81 	.globl _PX1
                                     82 	.globl _PT0
                                     83 	.globl _PX0
                                     84 	.globl _RD
                                     85 	.globl _WR
                                     86 	.globl _T1
                                     87 	.globl _T0
                                     88 	.globl _INT1
                                     89 	.globl _INT0
                                     90 	.globl _TXD
                                     91 	.globl _RXD
                                     92 	.globl _P3_7
                                     93 	.globl _P3_6
                                     94 	.globl _P3_5
                                     95 	.globl _P3_4
                                     96 	.globl _P3_3
                                     97 	.globl _P3_2
                                     98 	.globl _P3_1
                                     99 	.globl _P3_0
                                    100 	.globl _EA
                                    101 	.globl _EC
                                    102 	.globl _ET2
                                    103 	.globl _ES
                                    104 	.globl _ET1
                                    105 	.globl _EX1
                                    106 	.globl _ET0
                                    107 	.globl _EX0
                                    108 	.globl _A15
                                    109 	.globl _A14
                                    110 	.globl _A13
                                    111 	.globl _A12
                                    112 	.globl _A11
                                    113 	.globl _A10
                                    114 	.globl _A9
                                    115 	.globl _A8
                                    116 	.globl _P2_7
                                    117 	.globl _P2_6
                                    118 	.globl _P2_5
                                    119 	.globl _P2_4
                                    120 	.globl _P2_3
                                    121 	.globl _P2_2
                                    122 	.globl _P2_1
                                    123 	.globl _P2_0
                                    124 	.globl _FE
                                    125 	.globl _SM0
                                    126 	.globl _SM1
                                    127 	.globl _SM2
                                    128 	.globl _REN
                                    129 	.globl _TB8
                                    130 	.globl _RB8
                                    131 	.globl _TI
                                    132 	.globl _RI
                                    133 	.globl _CEX4
                                    134 	.globl _CEX3
                                    135 	.globl _CEX2
                                    136 	.globl _CEX1
                                    137 	.globl _CEX0
                                    138 	.globl _ECI
                                    139 	.globl _T2EX
                                    140 	.globl _T2
                                    141 	.globl _P1_7
                                    142 	.globl _P1_6
                                    143 	.globl _P1_5
                                    144 	.globl _P1_4
                                    145 	.globl _P1_3
                                    146 	.globl _P1_2
                                    147 	.globl _P1_1
                                    148 	.globl _P1_0
                                    149 	.globl _TF1
                                    150 	.globl _TR1
                                    151 	.globl _TF0
                                    152 	.globl _TR0
                                    153 	.globl _IE1
                                    154 	.globl _IT1
                                    155 	.globl _IE0
                                    156 	.globl _IT0
                                    157 	.globl _AD7
                                    158 	.globl _AD6
                                    159 	.globl _AD5
                                    160 	.globl _AD4
                                    161 	.globl _AD3
                                    162 	.globl _AD2
                                    163 	.globl _AD1
                                    164 	.globl _AD0
                                    165 	.globl _P0_7
                                    166 	.globl _P0_6
                                    167 	.globl _P0_5
                                    168 	.globl _P0_4
                                    169 	.globl _P0_3
                                    170 	.globl _P0_2
                                    171 	.globl _P0_1
                                    172 	.globl _P0_0
                                    173 	.globl _CCAP4H
                                    174 	.globl _CCAP3H
                                    175 	.globl _CCAP2H
                                    176 	.globl _CCAP1H
                                    177 	.globl _CCAP0H
                                    178 	.globl _CH
                                    179 	.globl _IPL1
                                    180 	.globl _IPH1
                                    181 	.globl _ADCF
                                    182 	.globl _ADDH
                                    183 	.globl _ADDL
                                    184 	.globl _ADCON
                                    185 	.globl _ADCLK
                                    186 	.globl _B
                                    187 	.globl _CCAP4L
                                    188 	.globl _CCAP3L
                                    189 	.globl _CCAP2L
                                    190 	.globl _CCAP1L
                                    191 	.globl _CCAP0L
                                    192 	.globl _CL
                                    193 	.globl _IEN1
                                    194 	.globl _A
                                    195 	.globl _ACC
                                    196 	.globl _CCAPM4
                                    197 	.globl _CCAPM3
                                    198 	.globl _CCAPM2
                                    199 	.globl _CCAPM1
                                    200 	.globl _CCAPM0
                                    201 	.globl _CMOD
                                    202 	.globl _CCON
                                    203 	.globl _SPDAT
                                    204 	.globl _SPSCR
                                    205 	.globl _SPCON
                                    206 	.globl _EECON
                                    207 	.globl _FCON
                                    208 	.globl _PSW
                                    209 	.globl _CANEN2
                                    210 	.globl _CANEN1
                                    211 	.globl _TH2
                                    212 	.globl _TL2
                                    213 	.globl _RCAP2H
                                    214 	.globl _RCAP2L
                                    215 	.globl _T2MOD
                                    216 	.globl _T2CON
                                    217 	.globl _P4
                                    218 	.globl _SADEN
                                    219 	.globl _IPL0
                                    220 	.globl _IPH0
                                    221 	.globl _P3
                                    222 	.globl _SADDR
                                    223 	.globl _IEN0
                                    224 	.globl _WDTPRG
                                    225 	.globl _WDTRST
                                    226 	.globl _AUXR1
                                    227 	.globl _P2
                                    228 	.globl _CKCON1
                                    229 	.globl _SBUF
                                    230 	.globl _SCON
                                    231 	.globl _P1
                                    232 	.globl _CKCON0
                                    233 	.globl _AUXR
                                    234 	.globl _TH1
                                    235 	.globl _TH0
                                    236 	.globl _TL1
                                    237 	.globl _TL0
                                    238 	.globl _TMOD
                                    239 	.globl _TCON
                                    240 	.globl _PCON
                                    241 	.globl _DPH
                                    242 	.globl _DPL
                                    243 	.globl _SP
                                    244 	.globl _P0
                                    245 	.globl _movingAvg_PARM_5
                                    246 	.globl _movingAvg_PARM_4
                                    247 	.globl _movingAvg_PARM_3
                                    248 	.globl _movingAvg_PARM_2
                                    249 	.globl _SD
                                    250 	.globl _pos
                                    251 	.globl _sum
                                    252 	.globl _lower
                                    253 	.globl _upper
                                    254 	.globl _sample
                                    255 	.globl _arrNumbers
                                    256 	.globl _str
                                    257 ;--------------------------------------------------------
                                    258 ; special function registers
                                    259 ;--------------------------------------------------------
                                    260 	.area RSEG    (ABS,DATA)
      000000                        261 	.org 0x0000
                           000080   262 _P0	=	0x0080
                           000081   263 _SP	=	0x0081
                           000082   264 _DPL	=	0x0082
                           000083   265 _DPH	=	0x0083
                           000087   266 _PCON	=	0x0087
                           000088   267 _TCON	=	0x0088
                           000089   268 _TMOD	=	0x0089
                           00008A   269 _TL0	=	0x008a
                           00008B   270 _TL1	=	0x008b
                           00008C   271 _TH0	=	0x008c
                           00008D   272 _TH1	=	0x008d
                           00008E   273 _AUXR	=	0x008e
                           00008F   274 _CKCON0	=	0x008f
                           000090   275 _P1	=	0x0090
                           000098   276 _SCON	=	0x0098
                           000099   277 _SBUF	=	0x0099
                           00009F   278 _CKCON1	=	0x009f
                           0000A0   279 _P2	=	0x00a0
                           0000A2   280 _AUXR1	=	0x00a2
                           0000A6   281 _WDTRST	=	0x00a6
                           0000A7   282 _WDTPRG	=	0x00a7
                           0000A8   283 _IEN0	=	0x00a8
                           0000A9   284 _SADDR	=	0x00a9
                           0000B0   285 _P3	=	0x00b0
                           0000B7   286 _IPH0	=	0x00b7
                           0000B8   287 _IPL0	=	0x00b8
                           0000B9   288 _SADEN	=	0x00b9
                           0000C0   289 _P4	=	0x00c0
                           0000C8   290 _T2CON	=	0x00c8
                           0000C9   291 _T2MOD	=	0x00c9
                           0000CA   292 _RCAP2L	=	0x00ca
                           0000CB   293 _RCAP2H	=	0x00cb
                           0000CC   294 _TL2	=	0x00cc
                           0000CD   295 _TH2	=	0x00cd
                           0000CE   296 _CANEN1	=	0x00ce
                           0000CF   297 _CANEN2	=	0x00cf
                           0000D0   298 _PSW	=	0x00d0
                           0000D1   299 _FCON	=	0x00d1
                           0000D2   300 _EECON	=	0x00d2
                           0000D4   301 _SPCON	=	0x00d4
                           0000D5   302 _SPSCR	=	0x00d5
                           0000D6   303 _SPDAT	=	0x00d6
                           0000D8   304 _CCON	=	0x00d8
                           0000D9   305 _CMOD	=	0x00d9
                           0000DA   306 _CCAPM0	=	0x00da
                           0000DB   307 _CCAPM1	=	0x00db
                           0000DC   308 _CCAPM2	=	0x00dc
                           0000DD   309 _CCAPM3	=	0x00dd
                           0000DE   310 _CCAPM4	=	0x00de
                           0000E0   311 _ACC	=	0x00e0
                           0000E0   312 _A	=	0x00e0
                           0000E8   313 _IEN1	=	0x00e8
                           0000E9   314 _CL	=	0x00e9
                           0000EA   315 _CCAP0L	=	0x00ea
                           0000EB   316 _CCAP1L	=	0x00eb
                           0000EC   317 _CCAP2L	=	0x00ec
                           0000ED   318 _CCAP3L	=	0x00ed
                           0000EE   319 _CCAP4L	=	0x00ee
                           0000F0   320 _B	=	0x00f0
                           0000F2   321 _ADCLK	=	0x00f2
                           0000F3   322 _ADCON	=	0x00f3
                           0000F4   323 _ADDL	=	0x00f4
                           0000F5   324 _ADDH	=	0x00f5
                           0000F6   325 _ADCF	=	0x00f6
                           0000F7   326 _IPH1	=	0x00f7
                           0000F8   327 _IPL1	=	0x00f8
                           0000F9   328 _CH	=	0x00f9
                           0000FA   329 _CCAP0H	=	0x00fa
                           0000FB   330 _CCAP1H	=	0x00fb
                           0000FC   331 _CCAP2H	=	0x00fc
                           0000FD   332 _CCAP3H	=	0x00fd
                           0000FE   333 _CCAP4H	=	0x00fe
                                    334 ;--------------------------------------------------------
                                    335 ; special function bits
                                    336 ;--------------------------------------------------------
                                    337 	.area RSEG    (ABS,DATA)
      000000                        338 	.org 0x0000
                           000080   339 _P0_0	=	0x0080
                           000081   340 _P0_1	=	0x0081
                           000082   341 _P0_2	=	0x0082
                           000083   342 _P0_3	=	0x0083
                           000084   343 _P0_4	=	0x0084
                           000085   344 _P0_5	=	0x0085
                           000086   345 _P0_6	=	0x0086
                           000087   346 _P0_7	=	0x0087
                           000080   347 _AD0	=	0x0080
                           000081   348 _AD1	=	0x0081
                           000082   349 _AD2	=	0x0082
                           000083   350 _AD3	=	0x0083
                           000084   351 _AD4	=	0x0084
                           000085   352 _AD5	=	0x0085
                           000086   353 _AD6	=	0x0086
                           000087   354 _AD7	=	0x0087
                           000088   355 _IT0	=	0x0088
                           000089   356 _IE0	=	0x0089
                           00008A   357 _IT1	=	0x008a
                           00008B   358 _IE1	=	0x008b
                           00008C   359 _TR0	=	0x008c
                           00008D   360 _TF0	=	0x008d
                           00008E   361 _TR1	=	0x008e
                           00008F   362 _TF1	=	0x008f
                           000090   363 _P1_0	=	0x0090
                           000091   364 _P1_1	=	0x0091
                           000092   365 _P1_2	=	0x0092
                           000093   366 _P1_3	=	0x0093
                           000094   367 _P1_4	=	0x0094
                           000095   368 _P1_5	=	0x0095
                           000096   369 _P1_6	=	0x0096
                           000097   370 _P1_7	=	0x0097
                           000090   371 _T2	=	0x0090
                           000091   372 _T2EX	=	0x0091
                           000092   373 _ECI	=	0x0092
                           000093   374 _CEX0	=	0x0093
                           000094   375 _CEX1	=	0x0094
                           000095   376 _CEX2	=	0x0095
                           000096   377 _CEX3	=	0x0096
                           000097   378 _CEX4	=	0x0097
                           000098   379 _RI	=	0x0098
                           000099   380 _TI	=	0x0099
                           00009A   381 _RB8	=	0x009a
                           00009B   382 _TB8	=	0x009b
                           00009C   383 _REN	=	0x009c
                           00009D   384 _SM2	=	0x009d
                           00009E   385 _SM1	=	0x009e
                           00009F   386 _SM0	=	0x009f
                           00009F   387 _FE	=	0x009f
                           0000A0   388 _P2_0	=	0x00a0
                           0000A1   389 _P2_1	=	0x00a1
                           0000A2   390 _P2_2	=	0x00a2
                           0000A3   391 _P2_3	=	0x00a3
                           0000A4   392 _P2_4	=	0x00a4
                           0000A5   393 _P2_5	=	0x00a5
                           0000A6   394 _P2_6	=	0x00a6
                           0000A7   395 _P2_7	=	0x00a7
                           0000A0   396 _A8	=	0x00a0
                           0000A1   397 _A9	=	0x00a1
                           0000A2   398 _A10	=	0x00a2
                           0000A3   399 _A11	=	0x00a3
                           0000A4   400 _A12	=	0x00a4
                           0000A5   401 _A13	=	0x00a5
                           0000A6   402 _A14	=	0x00a6
                           0000A7   403 _A15	=	0x00a7
                           0000A8   404 _EX0	=	0x00a8
                           0000A9   405 _ET0	=	0x00a9
                           0000AA   406 _EX1	=	0x00aa
                           0000AB   407 _ET1	=	0x00ab
                           0000AC   408 _ES	=	0x00ac
                           0000AD   409 _ET2	=	0x00ad
                           0000AE   410 _EC	=	0x00ae
                           0000AF   411 _EA	=	0x00af
                           0000B0   412 _P3_0	=	0x00b0
                           0000B1   413 _P3_1	=	0x00b1
                           0000B2   414 _P3_2	=	0x00b2
                           0000B3   415 _P3_3	=	0x00b3
                           0000B4   416 _P3_4	=	0x00b4
                           0000B5   417 _P3_5	=	0x00b5
                           0000B6   418 _P3_6	=	0x00b6
                           0000B7   419 _P3_7	=	0x00b7
                           0000B0   420 _RXD	=	0x00b0
                           0000B1   421 _TXD	=	0x00b1
                           0000B2   422 _INT0	=	0x00b2
                           0000B3   423 _INT1	=	0x00b3
                           0000B4   424 _T0	=	0x00b4
                           0000B5   425 _T1	=	0x00b5
                           0000B6   426 _WR	=	0x00b6
                           0000B7   427 _RD	=	0x00b7
                           0000B8   428 _PX0	=	0x00b8
                           0000B9   429 _PT0	=	0x00b9
                           0000BA   430 _PX1	=	0x00ba
                           0000BB   431 _PT1	=	0x00bb
                           0000BC   432 _PS	=	0x00bc
                           0000BD   433 _PT2	=	0x00bd
                           0000BE   434 _PPC	=	0x00be
                           0000C0   435 _P4_0	=	0x00c0
                           0000C1   436 _P4_1	=	0x00c1
                           0000C2   437 _P4_2	=	0x00c2
                           0000C3   438 _P4_3	=	0x00c3
                           0000C4   439 _P4_4	=	0x00c4
                           0000C2   440 _MISO	=	0x00c2
                           0000C3   441 _SCK	=	0x00c3
                           0000C4   442 _MOSI	=	0x00c4
                           0000C8   443 _CPRL2	=	0x00c8
                           0000C9   444 _CT2	=	0x00c9
                           0000CA   445 _TR2	=	0x00ca
                           0000CB   446 _EXEN2	=	0x00cb
                           0000CC   447 _TCLK	=	0x00cc
                           0000CD   448 _RCLK	=	0x00cd
                           0000CE   449 _EXF2	=	0x00ce
                           0000CF   450 _TF2	=	0x00cf
                           0000D0   451 _P	=	0x00d0
                           0000D1   452 _F1	=	0x00d1
                           0000D2   453 _OV	=	0x00d2
                           0000D3   454 _RS0	=	0x00d3
                           0000D4   455 _RS1	=	0x00d4
                           0000D5   456 _F0	=	0x00d5
                           0000D6   457 _AC	=	0x00d6
                           0000D7   458 _CY	=	0x00d7
                           0000D8   459 _CCF0	=	0x00d8
                           0000D9   460 _CCF1	=	0x00d9
                           0000DA   461 _CCF2	=	0x00da
                           0000DB   462 _CCF3	=	0x00db
                           0000DC   463 _CCF4	=	0x00dc
                           0000DE   464 _CR	=	0x00de
                           0000DF   465 _CF	=	0x00df
                           0000E0   466 _ACC0	=	0x00e0
                           0000E1   467 _ACC1	=	0x00e1
                           0000E2   468 _ACC2	=	0x00e2
                           0000E3   469 _ACC3	=	0x00e3
                           0000E4   470 _ACC4	=	0x00e4
                           0000E5   471 _ACC5	=	0x00e5
                           0000E6   472 _ACC6	=	0x00e6
                           0000E7   473 _ACC7	=	0x00e7
                           0000E0   474 _A0	=	0x00e0
                           0000E1   475 _A1	=	0x00e1
                           0000E2   476 _A2	=	0x00e2
                           0000E3   477 _A3	=	0x00e3
                           0000E4   478 _A4	=	0x00e4
                           0000E5   479 _A5	=	0x00e5
                           0000E6   480 _A6	=	0x00e6
                           0000E7   481 _A7	=	0x00e7
                           0000E8   482 _EADC	=	0x00e8
                           0000E9   483 _ESPI	=	0x00e9
                           0000F0   484 _B0	=	0x00f0
                           0000F1   485 _B1	=	0x00f1
                           0000F2   486 _B2	=	0x00f2
                           0000F3   487 _B3	=	0x00f3
                           0000F4   488 _B4	=	0x00f4
                           0000F5   489 _B5	=	0x00f5
                           0000F6   490 _B6	=	0x00f6
                           0000F7   491 _B7	=	0x00f7
                           0000F9   492 _PADCL	=	0x00f9
                                    493 ;--------------------------------------------------------
                                    494 ; overlayable register banks
                                    495 ;--------------------------------------------------------
                                    496 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        497 	.ds 8
                                    498 ;--------------------------------------------------------
                                    499 ; internal ram data
                                    500 ;--------------------------------------------------------
                                    501 	.area DSEG    (DATA)
      000000                        502 _str::
      000000                        503 	.ds 16
      000010                        504 _arrNumbers::
      000010                        505 	.ds 10
      00001A                        506 _sample::
      00001A                        507 	.ds 2
      00001C                        508 _upper::
      00001C                        509 	.ds 2
      00001E                        510 _lower::
      00001E                        511 	.ds 2
      000020                        512 _sum::
      000020                        513 	.ds 2
      000022                        514 _pos::
      000022                        515 	.ds 2
      000024                        516 _SD::
      000024                        517 	.ds 4
      000028                        518 _movingAvg_PARM_2:
      000028                        519 	.ds 3
      00002B                        520 _movingAvg_PARM_3:
      00002B                        521 	.ds 2
      00002D                        522 _movingAvg_PARM_4:
      00002D                        523 	.ds 2
      00002F                        524 _movingAvg_PARM_5:
      00002F                        525 	.ds 2
      000031                        526 _movingAvg_ptrArrNumbers_65536_52:
      000031                        527 	.ds 3
      000034                        528 _movingAvg_sloc0_1_0:
      000034                        529 	.ds 2
      000036                        530 _Sample_ADC_sample_65536_54:
      000036                        531 	.ds 2
                                    532 ;--------------------------------------------------------
                                    533 ; overlayable items in internal ram 
                                    534 ;--------------------------------------------------------
                                    535 ;--------------------------------------------------------
                                    536 ; Stack segment in internal ram 
                                    537 ;--------------------------------------------------------
                                    538 	.area	SSEG
      000000                        539 __start__stack:
      000000                        540 	.ds	1
                                    541 
                                    542 ;--------------------------------------------------------
                                    543 ; indirectly addressable internal ram data
                                    544 ;--------------------------------------------------------
                                    545 	.area ISEG    (DATA)
                                    546 ;--------------------------------------------------------
                                    547 ; absolute internal ram data
                                    548 ;--------------------------------------------------------
                                    549 	.area IABS    (ABS,DATA)
                                    550 	.area IABS    (ABS,DATA)
                                    551 ;--------------------------------------------------------
                                    552 ; bit data
                                    553 ;--------------------------------------------------------
                                    554 	.area BSEG    (BIT)
                                    555 ;--------------------------------------------------------
                                    556 ; paged external ram data
                                    557 ;--------------------------------------------------------
                                    558 	.area PSEG    (PAG,XDATA)
                                    559 ;--------------------------------------------------------
                                    560 ; external ram data
                                    561 ;--------------------------------------------------------
                                    562 	.area XSEG    (XDATA)
                                    563 ;--------------------------------------------------------
                                    564 ; absolute external ram data
                                    565 ;--------------------------------------------------------
                                    566 	.area XABS    (ABS,XDATA)
                                    567 ;--------------------------------------------------------
                                    568 ; external initialized ram data
                                    569 ;--------------------------------------------------------
                                    570 	.area XISEG   (XDATA)
                                    571 	.area HOME    (CODE)
                                    572 	.area GSINIT0 (CODE)
                                    573 	.area GSINIT1 (CODE)
                                    574 	.area GSINIT2 (CODE)
                                    575 	.area GSINIT3 (CODE)
                                    576 	.area GSINIT4 (CODE)
                                    577 	.area GSINIT5 (CODE)
                                    578 	.area GSINIT  (CODE)
                                    579 	.area GSFINAL (CODE)
                                    580 	.area CSEG    (CODE)
                                    581 ;--------------------------------------------------------
                                    582 ; interrupt vector 
                                    583 ;--------------------------------------------------------
                                    584 	.area HOME    (CODE)
      000000                        585 __interrupt_vect:
      000000 02r00r00         [24]  586 	ljmp	__sdcc_gsinit_startup
                                    587 ;--------------------------------------------------------
                                    588 ; global & static initialisations
                                    589 ;--------------------------------------------------------
                                    590 	.area HOME    (CODE)
                                    591 	.area GSINIT  (CODE)
                                    592 	.area GSFINAL (CODE)
                                    593 	.area GSINIT  (CODE)
                                    594 	.globl __sdcc_gsinit_startup
                                    595 	.globl __sdcc_program_startup
                                    596 	.globl __start__stack
                                    597 	.globl __mcs51_genXINIT
                                    598 	.globl __mcs51_genXRAMCLEAR
                                    599 	.globl __mcs51_genRAMCLEAR
                                    600 ;------------------------------------------------------------
                                    601 ;Allocation info for local variables in function 'Sample_ADC'
                                    602 ;------------------------------------------------------------
                                    603 ;sample                    Allocated with name '_Sample_ADC_sample_65536_54'
                                    604 ;------------------------------------------------------------
                                    605 ;	main.c:37: static unsigned int sample = 0;
      000000 E4               [12]  606 	clr	a
      000001 F5*36            [12]  607 	mov	_Sample_ADC_sample_65536_54,a
      000003 F5*37            [12]  608 	mov	(_Sample_ADC_sample_65536_54 + 1),a
                                    609 ;	main.c:16: unsigned int arrNumbers[5] = {0};
      000005 E4               [12]  610 	clr	a
      000006 F5*10            [12]  611 	mov	(_arrNumbers + 0),a
      000008 F5*11            [12]  612 	mov	(_arrNumbers + 1),a
                                    613 ;	main.c:19: unsigned int sum = 0;
      00000A F5*20            [12]  614 	mov	_sum,a
      00000C F5*21            [12]  615 	mov	(_sum + 1),a
                                    616 ;	main.c:20: unsigned short pos= 0;
      00000E F5*22            [12]  617 	mov	_pos,a
      000010 F5*23            [12]  618 	mov	(_pos + 1),a
                                    619 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  620 	ljmp	__sdcc_program_startup
                                    621 ;--------------------------------------------------------
                                    622 ; Home
                                    623 ;--------------------------------------------------------
                                    624 	.area HOME    (CODE)
                                    625 	.area HOME    (CODE)
      000003                        626 __sdcc_program_startup:
      000003 02r00rAC         [24]  627 	ljmp	_main
                                    628 ;	return from main will return to caller
                                    629 ;--------------------------------------------------------
                                    630 ; code
                                    631 ;--------------------------------------------------------
                                    632 	.area CSEG    (CODE)
                                    633 ;------------------------------------------------------------
                                    634 ;Allocation info for local variables in function 'movingAvg'
                                    635 ;------------------------------------------------------------
                                    636 ;ptrSum                    Allocated with name '_movingAvg_PARM_2'
                                    637 ;pos                       Allocated with name '_movingAvg_PARM_3'
                                    638 ;len                       Allocated with name '_movingAvg_PARM_4'
                                    639 ;nextNum                   Allocated with name '_movingAvg_PARM_5'
                                    640 ;ptrArrNumbers             Allocated with name '_movingAvg_ptrArrNumbers_65536_52'
                                    641 ;sloc0                     Allocated with name '_movingAvg_sloc0_1_0'
                                    642 ;------------------------------------------------------------
                                    643 ;	main.c:25: unsigned int movingAvg(unsigned int *ptrArrNumbers,unsigned int *ptrSum,unsigned short pos,unsigned int len,unsigned int nextNum)
                                    644 ;	-----------------------------------------
                                    645 ;	 function movingAvg
                                    646 ;	-----------------------------------------
      000000                        647 _movingAvg:
                           000007   648 	ar7 = 0x07
                           000006   649 	ar6 = 0x06
                           000005   650 	ar5 = 0x05
                           000004   651 	ar4 = 0x04
                           000003   652 	ar3 = 0x03
                           000002   653 	ar2 = 0x02
                           000001   654 	ar1 = 0x01
                           000000   655 	ar0 = 0x00
      000000 85 82*31         [24]  656 	mov	_movingAvg_ptrArrNumbers_65536_52,dpl
      000003 85 83*32         [24]  657 	mov	(_movingAvg_ptrArrNumbers_65536_52 + 1),dph
      000006 85 F0*33         [24]  658 	mov	(_movingAvg_ptrArrNumbers_65536_52 + 2),b
                                    659 ;	main.c:28: *ptrSum = *ptrSum - ptrArrNumbers[pos] + nextNum;
      000009 AA*28            [24]  660 	mov	r2,_movingAvg_PARM_2
      00000B AB*29            [24]  661 	mov	r3,(_movingAvg_PARM_2 + 1)
      00000D AC*2A            [24]  662 	mov	r4,(_movingAvg_PARM_2 + 2)
      00000F 8A 82            [24]  663 	mov	dpl,r2
      000011 8B 83            [24]  664 	mov	dph,r3
      000013 8C F0            [24]  665 	mov	b,r4
      000015 12r00r00         [24]  666 	lcall	__gptrget
      000018 F5*34            [12]  667 	mov	_movingAvg_sloc0_1_0,a
      00001A A3               [24]  668 	inc	dptr
      00001B 12r00r00         [24]  669 	lcall	__gptrget
      00001E F5*35            [12]  670 	mov	(_movingAvg_sloc0_1_0 + 1),a
      000020 E5*2B            [12]  671 	mov	a,_movingAvg_PARM_3
      000022 25*2B            [12]  672 	add	a,_movingAvg_PARM_3
      000024 FE               [12]  673 	mov	r6,a
      000025 E5*2C            [12]  674 	mov	a,(_movingAvg_PARM_3 + 1)
      000027 33               [12]  675 	rlc	a
      000028 FF               [12]  676 	mov	r7,a
      000029 EE               [12]  677 	mov	a,r6
      00002A 25*31            [12]  678 	add	a,_movingAvg_ptrArrNumbers_65536_52
      00002C FE               [12]  679 	mov	r6,a
      00002D EF               [12]  680 	mov	a,r7
      00002E 35*32            [12]  681 	addc	a,(_movingAvg_ptrArrNumbers_65536_52 + 1)
      000030 FF               [12]  682 	mov	r7,a
      000031 AD*33            [24]  683 	mov	r5,(_movingAvg_ptrArrNumbers_65536_52 + 2)
      000033 8E 82            [24]  684 	mov	dpl,r6
      000035 8F 83            [24]  685 	mov	dph,r7
      000037 8D F0            [24]  686 	mov	b,r5
      000039 12r00r00         [24]  687 	lcall	__gptrget
      00003C F8               [12]  688 	mov	r0,a
      00003D A3               [24]  689 	inc	dptr
      00003E 12r00r00         [24]  690 	lcall	__gptrget
      000041 F9               [12]  691 	mov	r1,a
      000042 E5*34            [12]  692 	mov	a,_movingAvg_sloc0_1_0
      000044 C3               [12]  693 	clr	c
      000045 98               [12]  694 	subb	a,r0
      000046 F8               [12]  695 	mov	r0,a
      000047 E5*35            [12]  696 	mov	a,(_movingAvg_sloc0_1_0 + 1)
      000049 99               [12]  697 	subb	a,r1
      00004A F9               [12]  698 	mov	r1,a
      00004B E5*2F            [12]  699 	mov	a,_movingAvg_PARM_5
      00004D 28               [12]  700 	add	a,r0
      00004E F8               [12]  701 	mov	r0,a
      00004F E5*30            [12]  702 	mov	a,(_movingAvg_PARM_5 + 1)
      000051 39               [12]  703 	addc	a,r1
      000052 F9               [12]  704 	mov	r1,a
      000053 8A 82            [24]  705 	mov	dpl,r2
      000055 8B 83            [24]  706 	mov	dph,r3
      000057 8C F0            [24]  707 	mov	b,r4
      000059 E8               [12]  708 	mov	a,r0
      00005A 12r00r00         [24]  709 	lcall	__gptrput
      00005D A3               [24]  710 	inc	dptr
      00005E E9               [12]  711 	mov	a,r1
      00005F 12r00r00         [24]  712 	lcall	__gptrput
                                    713 ;	main.c:30: ptrArrNumbers[pos] = nextNum;
      000062 8E 82            [24]  714 	mov	dpl,r6
      000064 8F 83            [24]  715 	mov	dph,r7
      000066 8D F0            [24]  716 	mov	b,r5
      000068 E5*2F            [12]  717 	mov	a,_movingAvg_PARM_5
      00006A 12r00r00         [24]  718 	lcall	__gptrput
      00006D A3               [24]  719 	inc	dptr
      00006E E5*30            [12]  720 	mov	a,(_movingAvg_PARM_5 + 1)
      000070 12r00r00         [24]  721 	lcall	__gptrput
                                    722 ;	main.c:32: return *ptrSum / len;
      000073 85*2D*00         [24]  723 	mov	__divuint_PARM_2,_movingAvg_PARM_4
      000076 85*2E*01         [24]  724 	mov	(__divuint_PARM_2 + 1),(_movingAvg_PARM_4 + 1)
      000079 88 82            [24]  725 	mov	dpl,r0
      00007B 89 83            [24]  726 	mov	dph,r1
                                    727 ;	main.c:33: }
      00007D 02r00r00         [24]  728 	ljmp	__divuint
                                    729 ;------------------------------------------------------------
                                    730 ;Allocation info for local variables in function 'Sample_ADC'
                                    731 ;------------------------------------------------------------
                                    732 ;sample                    Allocated with name '_Sample_ADC_sample_65536_54'
                                    733 ;------------------------------------------------------------
                                    734 ;	main.c:35: unsigned int Sample_ADC()
                                    735 ;	-----------------------------------------
                                    736 ;	 function Sample_ADC
                                    737 ;	-----------------------------------------
      000080                        738 _Sample_ADC:
                                    739 ;	main.c:38: ADCF  =  0b0000001; //select input
      000080 75 F6 01         [24]  740 	mov	_ADCF,#0x01
                                    741 ;	main.c:39: ADCON =  0b1101000; //clear control (0),set psidle and enable ADC(110...). Start(00010...)
      000083 75 F3 68         [24]  742 	mov	_ADCON,#0x68
                                    743 ;	main.c:40: ADCON &= 0b1101111;
      000086 53 F3 6F         [24]  744 	anl	_ADCON,#0x6f
                                    745 ;	main.c:41: sample = (ADDH << 2) + ADDL;
      000089 AE F5            [24]  746 	mov	r6,_ADDH
      00008B 7F 00            [12]  747 	mov	r7,#0x00
      00008D EE               [12]  748 	mov	a,r6
      00008E 2E               [12]  749 	add	a,r6
      00008F FE               [12]  750 	mov	r6,a
      000090 EF               [12]  751 	mov	a,r7
      000091 33               [12]  752 	rlc	a
      000092 FF               [12]  753 	mov	r7,a
      000093 EE               [12]  754 	mov	a,r6
      000094 2E               [12]  755 	add	a,r6
      000095 FE               [12]  756 	mov	r6,a
      000096 EF               [12]  757 	mov	a,r7
      000097 33               [12]  758 	rlc	a
      000098 FF               [12]  759 	mov	r7,a
      000099 AC F4            [24]  760 	mov	r4,_ADDL
      00009B 7D 00            [12]  761 	mov	r5,#0x00
      00009D EC               [12]  762 	mov	a,r4
      00009E 2E               [12]  763 	add	a,r6
      00009F F5*36            [12]  764 	mov	_Sample_ADC_sample_65536_54,a
      0000A1 ED               [12]  765 	mov	a,r5
      0000A2 3F               [12]  766 	addc	a,r7
      0000A3 F5*37            [12]  767 	mov	(_Sample_ADC_sample_65536_54 + 1),a
                                    768 ;	main.c:42: return sample;
      0000A5 85*36 82         [24]  769 	mov	dpl,_Sample_ADC_sample_65536_54
      0000A8 85*37 83         [24]  770 	mov	dph,(_Sample_ADC_sample_65536_54 + 1)
                                    771 ;	main.c:43: }
      0000AB 22               [24]  772 	ret
                                    773 ;------------------------------------------------------------
                                    774 ;Allocation info for local variables in function 'main'
                                    775 ;------------------------------------------------------------
                                    776 ;	main.c:48: void main()
                                    777 ;	-----------------------------------------
                                    778 ;	 function main
                                    779 ;	-----------------------------------------
      0000AC                        780 _main:
                                    781 ;	main.c:50: initLCD();
      0000AC 12r00r00         [24]  782 	lcall	_initLCD
                                    783 ;	main.c:51: while (1) {
      0000AF                        784 00107$:
                                    785 ;	main.c:52: sample = Sample_ADC();
      0000AF 12r00r80         [24]  786 	lcall	_Sample_ADC
      0000B2 85 82*1A         [24]  787 	mov	_sample,dpl
      0000B5 85 83*1B         [24]  788 	mov	(_sample + 1),dph
                                    789 ;	main.c:53: sample = movingAvg(arrNumbers, &sum, pos, 5, sample);
      0000B8 75*28r20         [24]  790 	mov	_movingAvg_PARM_2,#_sum
      0000BB 75*29 00         [24]  791 	mov	(_movingAvg_PARM_2 + 1),#0x00
      0000BE 75*2A 40         [24]  792 	mov	(_movingAvg_PARM_2 + 2),#0x40
      0000C1 85*22*2B         [24]  793 	mov	_movingAvg_PARM_3,_pos
      0000C4 85*23*2C         [24]  794 	mov	(_movingAvg_PARM_3 + 1),(_pos + 1)
      0000C7 75*2D 05         [24]  795 	mov	_movingAvg_PARM_4,#0x05
      0000CA 75*2E 00         [24]  796 	mov	(_movingAvg_PARM_4 + 1),#0x00
      0000CD 85*1A*2F         [24]  797 	mov	_movingAvg_PARM_5,_sample
      0000D0 85*1B*30         [24]  798 	mov	(_movingAvg_PARM_5 + 1),(_sample + 1)
      0000D3 90r00r10         [24]  799 	mov	dptr,#_arrNumbers
      0000D6 75 F0 40         [24]  800 	mov	b,#0x40
      0000D9 12r00r00         [24]  801 	lcall	_movingAvg
      0000DC 85 82*1A         [24]  802 	mov	_sample,dpl
      0000DF 85 83*1B         [24]  803 	mov	(_sample + 1),dph
                                    804 ;	main.c:54: pos++;
      0000E2 05*22            [12]  805 	inc	_pos
      0000E4 E4               [12]  806 	clr	a
      0000E5 B5*22 02         [24]  807 	cjne	a,_pos,00123$
      0000E8 05*23            [12]  808 	inc	(_pos + 1)
      0000EA                        809 00123$:
                                    810 ;	main.c:55: if (pos >= 5){
      0000EA C3               [12]  811 	clr	c
      0000EB E5*22            [12]  812 	mov	a,_pos
      0000ED 94 05            [12]  813 	subb	a,#0x05
      0000EF E5*23            [12]  814 	mov	a,(_pos + 1)
      0000F1 94 00            [12]  815 	subb	a,#0x00
      0000F3 40 05            [24]  816 	jc	00102$
                                    817 ;	main.c:56: pos = 0;
      0000F5 E4               [12]  818 	clr	a
      0000F6 F5*22            [12]  819 	mov	_pos,a
      0000F8 F5*23            [12]  820 	mov	(_pos + 1),a
      0000FA                        821 00102$:
                                    822 ;	main.c:59: if (sample >= 669){
      0000FA C3               [12]  823 	clr	c
      0000FB E5*1A            [12]  824 	mov	a,_sample
      0000FD 94 9D            [12]  825 	subb	a,#0x9d
      0000FF E5*1B            [12]  826 	mov	a,(_sample + 1)
      000101 94 02            [12]  827 	subb	a,#0x02
      000103 50 03            [24]  828 	jnc	00125$
      000105 02r02r2C         [24]  829 	ljmp	00104$
      000108                        830 00125$:
                                    831 ;	main.c:60: upper = (unsigned int)((float)sample - 421.0) / 6.4;
      000108 85*1A 82         [24]  832 	mov	dpl,_sample
      00010B 85*1B 83         [24]  833 	mov	dph,(_sample + 1)
      00010E 12r00r00         [24]  834 	lcall	___uint2fs
      000111 AC 82            [24]  835 	mov	r4,dpl
      000113 AD 83            [24]  836 	mov	r5,dph
      000115 AE F0            [24]  837 	mov	r6,b
      000117 FF               [12]  838 	mov	r7,a
      000118 E4               [12]  839 	clr	a
      000119 C0 E0            [24]  840 	push	acc
      00011B 74 80            [12]  841 	mov	a,#0x80
      00011D C0 E0            [24]  842 	push	acc
      00011F 74 D2            [12]  843 	mov	a,#0xd2
      000121 C0 E0            [24]  844 	push	acc
      000123 74 43            [12]  845 	mov	a,#0x43
      000125 C0 E0            [24]  846 	push	acc
      000127 8C 82            [24]  847 	mov	dpl,r4
      000129 8D 83            [24]  848 	mov	dph,r5
      00012B 8E F0            [24]  849 	mov	b,r6
      00012D EF               [12]  850 	mov	a,r7
      00012E 12r00r00         [24]  851 	lcall	___fssub
      000131 AC 82            [24]  852 	mov	r4,dpl
      000133 AD 83            [24]  853 	mov	r5,dph
      000135 AE F0            [24]  854 	mov	r6,b
      000137 FF               [12]  855 	mov	r7,a
      000138 E5 81            [12]  856 	mov	a,sp
      00013A 24 FC            [12]  857 	add	a,#0xfc
      00013C F5 81            [12]  858 	mov	sp,a
      00013E 8C 82            [24]  859 	mov	dpl,r4
      000140 8D 83            [24]  860 	mov	dph,r5
      000142 8E F0            [24]  861 	mov	b,r6
      000144 EF               [12]  862 	mov	a,r7
      000145 C0 07            [24]  863 	push	ar7
      000147 C0 06            [24]  864 	push	ar6
      000149 C0 05            [24]  865 	push	ar5
      00014B C0 04            [24]  866 	push	ar4
      00014D 12r00r00         [24]  867 	lcall	___fs2uint
      000150 12r00r00         [24]  868 	lcall	___uint2fs
      000153 A8 82            [24]  869 	mov	r0,dpl
      000155 A9 83            [24]  870 	mov	r1,dph
      000157 AA F0            [24]  871 	mov	r2,b
      000159 FB               [12]  872 	mov	r3,a
      00015A 74 CD            [12]  873 	mov	a,#0xcd
      00015C C0 E0            [24]  874 	push	acc
      00015E 14               [12]  875 	dec	a
      00015F C0 E0            [24]  876 	push	acc
      000161 C0 E0            [24]  877 	push	acc
      000163 74 40            [12]  878 	mov	a,#0x40
      000165 C0 E0            [24]  879 	push	acc
      000167 88 82            [24]  880 	mov	dpl,r0
      000169 89 83            [24]  881 	mov	dph,r1
      00016B 8A F0            [24]  882 	mov	b,r2
      00016D EB               [12]  883 	mov	a,r3
      00016E 12r00r00         [24]  884 	lcall	___fsdiv
      000171 A8 82            [24]  885 	mov	r0,dpl
      000173 A9 83            [24]  886 	mov	r1,dph
      000175 AA F0            [24]  887 	mov	r2,b
      000177 FB               [12]  888 	mov	r3,a
      000178 E5 81            [12]  889 	mov	a,sp
      00017A 24 FC            [12]  890 	add	a,#0xfc
      00017C F5 81            [12]  891 	mov	sp,a
      00017E 88 82            [24]  892 	mov	dpl,r0
      000180 89 83            [24]  893 	mov	dph,r1
      000182 8A F0            [24]  894 	mov	b,r2
      000184 EB               [12]  895 	mov	a,r3
      000185 12r00r00         [24]  896 	lcall	___fs2uint
      000188 85 82*1C         [24]  897 	mov	_upper,dpl
      00018B 85 83*1D         [24]  898 	mov	(_upper + 1),dph
      00018E D0 04            [24]  899 	pop	ar4
      000190 D0 05            [24]  900 	pop	ar5
      000192 D0 06            [24]  901 	pop	ar6
      000194 D0 07            [24]  902 	pop	ar7
                                    903 ;	main.c:61: lower = ((((float)sample - 421.0) / 6.4) - (float)upper) * 100.0;
      000196 74 CD            [12]  904 	mov	a,#0xcd
      000198 C0 E0            [24]  905 	push	acc
      00019A 14               [12]  906 	dec	a
      00019B C0 E0            [24]  907 	push	acc
      00019D C0 E0            [24]  908 	push	acc
      00019F 74 40            [12]  909 	mov	a,#0x40
      0001A1 C0 E0            [24]  910 	push	acc
      0001A3 8C 82            [24]  911 	mov	dpl,r4
      0001A5 8D 83            [24]  912 	mov	dph,r5
      0001A7 8E F0            [24]  913 	mov	b,r6
      0001A9 EF               [12]  914 	mov	a,r7
      0001AA 12r00r00         [24]  915 	lcall	___fsdiv
      0001AD AC 82            [24]  916 	mov	r4,dpl
      0001AF AD 83            [24]  917 	mov	r5,dph
      0001B1 AE F0            [24]  918 	mov	r6,b
      0001B3 FF               [12]  919 	mov	r7,a
      0001B4 E5 81            [12]  920 	mov	a,sp
      0001B6 24 FC            [12]  921 	add	a,#0xfc
      0001B8 F5 81            [12]  922 	mov	sp,a
      0001BA 85*1C 82         [24]  923 	mov	dpl,_upper
      0001BD 85*1D 83         [24]  924 	mov	dph,(_upper + 1)
      0001C0 C0 07            [24]  925 	push	ar7
      0001C2 C0 06            [24]  926 	push	ar6
      0001C4 C0 05            [24]  927 	push	ar5
      0001C6 C0 04            [24]  928 	push	ar4
      0001C8 12r00r00         [24]  929 	lcall	___uint2fs
      0001CB A8 82            [24]  930 	mov	r0,dpl
      0001CD A9 83            [24]  931 	mov	r1,dph
      0001CF AA F0            [24]  932 	mov	r2,b
      0001D1 FB               [12]  933 	mov	r3,a
      0001D2 D0 04            [24]  934 	pop	ar4
      0001D4 D0 05            [24]  935 	pop	ar5
      0001D6 D0 06            [24]  936 	pop	ar6
      0001D8 D0 07            [24]  937 	pop	ar7
      0001DA C0 00            [24]  938 	push	ar0
      0001DC C0 01            [24]  939 	push	ar1
      0001DE C0 02            [24]  940 	push	ar2
      0001E0 C0 03            [24]  941 	push	ar3
      0001E2 8C 82            [24]  942 	mov	dpl,r4
      0001E4 8D 83            [24]  943 	mov	dph,r5
      0001E6 8E F0            [24]  944 	mov	b,r6
      0001E8 EF               [12]  945 	mov	a,r7
      0001E9 12r00r00         [24]  946 	lcall	___fssub
      0001EC AC 82            [24]  947 	mov	r4,dpl
      0001EE AD 83            [24]  948 	mov	r5,dph
      0001F0 AE F0            [24]  949 	mov	r6,b
      0001F2 FF               [12]  950 	mov	r7,a
      0001F3 E5 81            [12]  951 	mov	a,sp
      0001F5 24 FC            [12]  952 	add	a,#0xfc
      0001F7 F5 81            [12]  953 	mov	sp,a
      0001F9 C0 04            [24]  954 	push	ar4
      0001FB C0 05            [24]  955 	push	ar5
      0001FD C0 06            [24]  956 	push	ar6
      0001FF C0 07            [24]  957 	push	ar7
      000201 90 00 00         [24]  958 	mov	dptr,#0x0000
      000204 75 F0 C8         [24]  959 	mov	b,#0xc8
      000207 74 42            [12]  960 	mov	a,#0x42
      000209 12r00r00         [24]  961 	lcall	___fsmul
      00020C AC 82            [24]  962 	mov	r4,dpl
      00020E AD 83            [24]  963 	mov	r5,dph
      000210 AE F0            [24]  964 	mov	r6,b
      000212 FF               [12]  965 	mov	r7,a
      000213 E5 81            [12]  966 	mov	a,sp
      000215 24 FC            [12]  967 	add	a,#0xfc
      000217 F5 81            [12]  968 	mov	sp,a
      000219 8C 82            [24]  969 	mov	dpl,r4
      00021B 8D 83            [24]  970 	mov	dph,r5
      00021D 8E F0            [24]  971 	mov	b,r6
      00021F EF               [12]  972 	mov	a,r7
      000220 12r00r00         [24]  973 	lcall	___fs2uint
      000223 85 82*1E         [24]  974 	mov	_lower,dpl
      000226 85 83*1F         [24]  975 	mov	(_lower + 1),dph
      000229 02r03r4F         [24]  976 	ljmp	00105$
      00022C                        977 00104$:
                                    978 ;	main.c:63: upper = (unsigned int)((float)sample - 210.0) / 11.8;
      00022C 85*1A 82         [24]  979 	mov	dpl,_sample
      00022F 85*1B 83         [24]  980 	mov	dph,(_sample + 1)
      000232 12r00r00         [24]  981 	lcall	___uint2fs
      000235 AC 82            [24]  982 	mov	r4,dpl
      000237 AD 83            [24]  983 	mov	r5,dph
      000239 AE F0            [24]  984 	mov	r6,b
      00023B FF               [12]  985 	mov	r7,a
      00023C E4               [12]  986 	clr	a
      00023D C0 E0            [24]  987 	push	acc
      00023F C0 E0            [24]  988 	push	acc
      000241 74 52            [12]  989 	mov	a,#0x52
      000243 C0 E0            [24]  990 	push	acc
      000245 74 43            [12]  991 	mov	a,#0x43
      000247 C0 E0            [24]  992 	push	acc
      000249 8C 82            [24]  993 	mov	dpl,r4
      00024B 8D 83            [24]  994 	mov	dph,r5
      00024D 8E F0            [24]  995 	mov	b,r6
      00024F EF               [12]  996 	mov	a,r7
      000250 12r00r00         [24]  997 	lcall	___fssub
      000253 AC 82            [24]  998 	mov	r4,dpl
      000255 AD 83            [24]  999 	mov	r5,dph
      000257 AE F0            [24] 1000 	mov	r6,b
      000259 FF               [12] 1001 	mov	r7,a
      00025A E5 81            [12] 1002 	mov	a,sp
      00025C 24 FC            [12] 1003 	add	a,#0xfc
      00025E F5 81            [12] 1004 	mov	sp,a
      000260 8C 82            [24] 1005 	mov	dpl,r4
      000262 8D 83            [24] 1006 	mov	dph,r5
      000264 8E F0            [24] 1007 	mov	b,r6
      000266 EF               [12] 1008 	mov	a,r7
      000267 C0 07            [24] 1009 	push	ar7
      000269 C0 06            [24] 1010 	push	ar6
      00026B C0 05            [24] 1011 	push	ar5
      00026D C0 04            [24] 1012 	push	ar4
      00026F 12r00r00         [24] 1013 	lcall	___fs2uint
      000272 12r00r00         [24] 1014 	lcall	___uint2fs
      000275 A8 82            [24] 1015 	mov	r0,dpl
      000277 A9 83            [24] 1016 	mov	r1,dph
      000279 AA F0            [24] 1017 	mov	r2,b
      00027B FB               [12] 1018 	mov	r3,a
      00027C 74 CD            [12] 1019 	mov	a,#0xcd
      00027E C0 E0            [24] 1020 	push	acc
      000280 14               [12] 1021 	dec	a
      000281 C0 E0            [24] 1022 	push	acc
      000283 74 3C            [12] 1023 	mov	a,#0x3c
      000285 C0 E0            [24] 1024 	push	acc
      000287 74 41            [12] 1025 	mov	a,#0x41
      000289 C0 E0            [24] 1026 	push	acc
      00028B 88 82            [24] 1027 	mov	dpl,r0
      00028D 89 83            [24] 1028 	mov	dph,r1
      00028F 8A F0            [24] 1029 	mov	b,r2
      000291 EB               [12] 1030 	mov	a,r3
      000292 12r00r00         [24] 1031 	lcall	___fsdiv
      000295 A8 82            [24] 1032 	mov	r0,dpl
      000297 A9 83            [24] 1033 	mov	r1,dph
      000299 AA F0            [24] 1034 	mov	r2,b
      00029B FB               [12] 1035 	mov	r3,a
      00029C E5 81            [12] 1036 	mov	a,sp
      00029E 24 FC            [12] 1037 	add	a,#0xfc
      0002A0 F5 81            [12] 1038 	mov	sp,a
      0002A2 88 82            [24] 1039 	mov	dpl,r0
      0002A4 89 83            [24] 1040 	mov	dph,r1
      0002A6 8A F0            [24] 1041 	mov	b,r2
      0002A8 EB               [12] 1042 	mov	a,r3
      0002A9 12r00r00         [24] 1043 	lcall	___fs2uint
      0002AC 85 82*1C         [24] 1044 	mov	_upper,dpl
      0002AF 85 83*1D         [24] 1045 	mov	(_upper + 1),dph
      0002B2 D0 04            [24] 1046 	pop	ar4
      0002B4 D0 05            [24] 1047 	pop	ar5
      0002B6 D0 06            [24] 1048 	pop	ar6
      0002B8 D0 07            [24] 1049 	pop	ar7
                                   1050 ;	main.c:64: lower = ((((float)sample - 210.0) / 11.8) - (float)upper) * 100.0;
      0002BA 74 CD            [12] 1051 	mov	a,#0xcd
      0002BC C0 E0            [24] 1052 	push	acc
      0002BE 14               [12] 1053 	dec	a
      0002BF C0 E0            [24] 1054 	push	acc
      0002C1 74 3C            [12] 1055 	mov	a,#0x3c
      0002C3 C0 E0            [24] 1056 	push	acc
      0002C5 74 41            [12] 1057 	mov	a,#0x41
      0002C7 C0 E0            [24] 1058 	push	acc
      0002C9 8C 82            [24] 1059 	mov	dpl,r4
      0002CB 8D 83            [24] 1060 	mov	dph,r5
      0002CD 8E F0            [24] 1061 	mov	b,r6
      0002CF EF               [12] 1062 	mov	a,r7
      0002D0 12r00r00         [24] 1063 	lcall	___fsdiv
      0002D3 AC 82            [24] 1064 	mov	r4,dpl
      0002D5 AD 83            [24] 1065 	mov	r5,dph
      0002D7 AE F0            [24] 1066 	mov	r6,b
      0002D9 FF               [12] 1067 	mov	r7,a
      0002DA E5 81            [12] 1068 	mov	a,sp
      0002DC 24 FC            [12] 1069 	add	a,#0xfc
      0002DE F5 81            [12] 1070 	mov	sp,a
      0002E0 85*1C 82         [24] 1071 	mov	dpl,_upper
      0002E3 85*1D 83         [24] 1072 	mov	dph,(_upper + 1)
      0002E6 C0 07            [24] 1073 	push	ar7
      0002E8 C0 06            [24] 1074 	push	ar6
      0002EA C0 05            [24] 1075 	push	ar5
      0002EC C0 04            [24] 1076 	push	ar4
      0002EE 12r00r00         [24] 1077 	lcall	___uint2fs
      0002F1 A8 82            [24] 1078 	mov	r0,dpl
      0002F3 A9 83            [24] 1079 	mov	r1,dph
      0002F5 AA F0            [24] 1080 	mov	r2,b
      0002F7 FB               [12] 1081 	mov	r3,a
      0002F8 D0 04            [24] 1082 	pop	ar4
      0002FA D0 05            [24] 1083 	pop	ar5
      0002FC D0 06            [24] 1084 	pop	ar6
      0002FE D0 07            [24] 1085 	pop	ar7
      000300 C0 00            [24] 1086 	push	ar0
      000302 C0 01            [24] 1087 	push	ar1
      000304 C0 02            [24] 1088 	push	ar2
      000306 C0 03            [24] 1089 	push	ar3
      000308 8C 82            [24] 1090 	mov	dpl,r4
      00030A 8D 83            [24] 1091 	mov	dph,r5
      00030C 8E F0            [24] 1092 	mov	b,r6
      00030E EF               [12] 1093 	mov	a,r7
      00030F 12r00r00         [24] 1094 	lcall	___fssub
      000312 AC 82            [24] 1095 	mov	r4,dpl
      000314 AD 83            [24] 1096 	mov	r5,dph
      000316 AE F0            [24] 1097 	mov	r6,b
      000318 FF               [12] 1098 	mov	r7,a
      000319 E5 81            [12] 1099 	mov	a,sp
      00031B 24 FC            [12] 1100 	add	a,#0xfc
      00031D F5 81            [12] 1101 	mov	sp,a
      00031F C0 04            [24] 1102 	push	ar4
      000321 C0 05            [24] 1103 	push	ar5
      000323 C0 06            [24] 1104 	push	ar6
      000325 C0 07            [24] 1105 	push	ar7
      000327 90 00 00         [24] 1106 	mov	dptr,#0x0000
      00032A 75 F0 C8         [24] 1107 	mov	b,#0xc8
      00032D 74 42            [12] 1108 	mov	a,#0x42
      00032F 12r00r00         [24] 1109 	lcall	___fsmul
      000332 AC 82            [24] 1110 	mov	r4,dpl
      000334 AD 83            [24] 1111 	mov	r5,dph
      000336 AE F0            [24] 1112 	mov	r6,b
      000338 FF               [12] 1113 	mov	r7,a
      000339 E5 81            [12] 1114 	mov	a,sp
      00033B 24 FC            [12] 1115 	add	a,#0xfc
      00033D F5 81            [12] 1116 	mov	sp,a
      00033F 8C 82            [24] 1117 	mov	dpl,r4
      000341 8D 83            [24] 1118 	mov	dph,r5
      000343 8E F0            [24] 1119 	mov	b,r6
      000345 EF               [12] 1120 	mov	a,r7
      000346 12r00r00         [24] 1121 	lcall	___fs2uint
      000349 85 82*1E         [24] 1122 	mov	_lower,dpl
      00034C 85 83*1F         [24] 1123 	mov	(_lower + 1),dph
      00034F                       1124 00105$:
                                   1125 ;	main.c:77: sprintf(str, "T: %d.%d", upper, lower);;
      00034F C0*1E            [24] 1126 	push	_lower
      000351 C0*1F            [24] 1127 	push	(_lower + 1)
      000353 C0*1C            [24] 1128 	push	_upper
      000355 C0*1D            [24] 1129 	push	(_upper + 1)
      000357 74r00            [12] 1130 	mov	a,#___str_0
      000359 C0 E0            [24] 1131 	push	acc
      00035B 74s00            [12] 1132 	mov	a,#(___str_0 >> 8)
      00035D C0 E0            [24] 1133 	push	acc
      00035F 74 80            [12] 1134 	mov	a,#0x80
      000361 C0 E0            [24] 1135 	push	acc
      000363 74r00            [12] 1136 	mov	a,#_str
      000365 C0 E0            [24] 1137 	push	acc
      000367 74s00            [12] 1138 	mov	a,#(_str >> 8)
      000369 C0 E0            [24] 1139 	push	acc
      00036B 74 40            [12] 1140 	mov	a,#0x40
      00036D C0 E0            [24] 1141 	push	acc
      00036F 12r00r00         [24] 1142 	lcall	_sprintf
      000372 E5 81            [12] 1143 	mov	a,sp
      000374 24 F6            [12] 1144 	add	a,#0xf6
      000376 F5 81            [12] 1145 	mov	sp,a
                                   1146 ;	main.c:78: writeLineLCD(str);;
      000378 90r00r00         [24] 1147 	mov	dptr,#_str
      00037B 75 F0 40         [24] 1148 	mov	b,#0x40
      00037E 12r00r00         [24] 1149 	lcall	_writeLineLCD
                                   1150 ;	main.c:79: delay(100000);
      000381 90 86 A0         [24] 1151 	mov	dptr,#0x86a0
      000384 12r00r00         [24] 1152 	lcall	_delay
                                   1153 ;	main.c:80: clearLCD();
      000387 12r00r00         [24] 1154 	lcall	_clearLCD
                                   1155 ;	main.c:83: }
      00038A 02r00rAF         [24] 1156 	ljmp	00107$
                                   1157 	.area CSEG    (CODE)
                                   1158 	.area CONST   (CODE)
      000000                       1159 ___str_0:
      000000 54 3A 20 25 64 2E 25  1160 	.ascii "T: %d.%d"
             64
      000008 00                    1161 	.db 0x00
                                   1162 	.area XINIT   (CODE)
                                   1163 	.area CABS    (ABS,CODE)
