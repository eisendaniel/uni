%implements s1_b0_woj8h_Functions "C"

%function RandSrcInitState_GZ_Fcn0(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int32_T i;
int32_T tmp;
/* {S!d40}InitializeConditions for S-Function (sdsprandsrc2): '<Root>/Random Source' */
/* RandSrcInitState_GZ */
for (i = 0; i < nChans; i++) {
    tmp = i << 1;
    state[tmp] = 362436069U;
    state[tmp + 1] = seed[i] == 0U ? 521288629U : seed[i];
}
/* {E!d40}End of InitializeConditions for S-Function (sdsprandsrc2): '<Root>/Random Source' */
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
extern void RandSrcInitState_GZ(\
%assign comma = ""
%<comma>const uint32_T seed[]\
%assign comma = ", "
%<comma>uint32_T state[]\
%assign comma = ", "
%<comma>int32_T nChans\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 0, fcnProtoType)>
%return fcnBuff
%endfunction

%function RandSrc_GZ_D_Fcn1(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int32_T i;
int32_T j;
real_T r;
real_T x;
real_T s;
real_T y_0;
int32_T chan;
real_T std;
uint32_T icng;
uint32_T jsr;
int32_T samp;
int32_T icng_tmp;
int32_T jsr_tmp;
static const real_T vt[65] = { 0.340945, 0.4573146, 0.5397793, 0.6062427, 0.6631691, 0.7136975, 0.7596125, 0.8020356, 0.8417227, 0.8792102, 0.9148948, 0.9490791, 0.9820005, 1.0138492, 1.044781, 1.0749254, 1.1043917, 1.1332738, 1.161653, 1.189601, 1.2171815, 1.2444516, 1.2714635, 1.298265, 1.3249008, 1.3514125, 1.3778399, 1.4042211, 1.4305929, 1.4569915, 1.4834527, 1.5100122, 1.5367061, 1.5635712, 1.5906454, 1.617968, 1.6455802, 1.6735255, 1.7018503, 1.7306045, 1.7598422, 1.7896223, 1.8200099, 1.851077, 1.8829044, 1.9155831, 1.9492166, 1.9839239, 2.0198431, 2.0571356, 2.095993, 2.136645, 2.1793713, 2.2245175, 2.2725186, 2.3239338, 2.3795008, 2.4402218, 2.5075117, 2.5834658, 2.6713916, 2.7769942, 2.7769942, 2.7769942, 2.7769942 };
/* {S!d42}S-Function (sdsprandsrc2): '<Root>/Random Source' */
/* RandSrc_GZ_D */
for (chan = 0; chan < nChans; chan++) {
    std = xstd[xstdLen > 1 ? chan : 0];
    icng_tmp = chan << 1;
    icng = state[icng_tmp];
    jsr_tmp = icng_tmp + 1;
    jsr = state[jsr_tmp];
    for (samp = 0; samp < nSamps; samp++) {
        icng = 69069U * icng + 1234567U;
        jsr ^= jsr << 13;
        jsr ^= jsr >> 17;
        jsr ^= jsr << 5;
        i = static_cast<int32_T>(icng + jsr);
        j = (i & 63) + 1;
        r = static_cast<real_T>(i) * 4.6566128730773926E-10 * vt[j];
        x = std::abs(r);
        y_0 = vt[j - 1];
        if (!(x <= y_0)) {
            x = (x - y_0) / (vt[j] - y_0);
            icng = 69069U * icng + 1234567U;
            jsr ^= jsr << 13;
            jsr ^= jsr >> 17;
            jsr ^= jsr << 5;
            y_0 = static_cast<real_T>(static_cast<int32_T>(icng + jsr)) * 2.328306436538696E-10 + 0.5;
            s = x + y_0;
            if (s > 1.301198) {
                r = r < 0.0 ? 0.4878992 * x - 0.4878992 : 0.4878992 - 0.4878992 * x;
            } else {
                if (!(s <= 0.9689279)) {
                    x = 0.4878992 - 0.4878992 * x;
                    if (y_0 > 12.67706 - std::exp(-0.5 * x * x) * 12.37586) {
                        r = r < 0.0 ? -x : x;
                    } else {
                        if (!(std::exp(-0.5 * vt[j] * vt[j]) + y_0 * 0.01958303 / vt[j] <= std::exp(-0.5 * r * r))) {
                            do {
                                icng = 69069U * icng + 1234567U;
                                jsr ^= jsr << 13;
                                jsr ^= jsr >> 17;
                                jsr ^= jsr << 5;
                                x = std::log(static_cast<real_T>(static_cast<int32_T>(icng + jsr)) * 2.328306436538696E-10 + 0.5) / 2.776994;
                                icng = 69069U * icng + 1234567U;
                                jsr ^= jsr << 13;
                                jsr ^= jsr >> 17;
                                jsr ^= jsr << 5;
                            } while (std::log(static_cast<real_T>(static_cast<int32_T>(icng + jsr)) * 2.328306436538696E-10 + 0.5) * -2.0 <= x * x);
                            r = r < 0.0 ? x - 2.776994 : 2.776994 - x;
                        }
                    }
                }
            }
        }
        y[chan * nSamps + samp] = mean[meanLen > 1 ? chan : 0] + std * r;
    }
    state[icng_tmp] = icng;
    state[jsr_tmp] = jsr;
}
/* {E!d42}End of S-Function (sdsprandsrc2): '<Root>/Random Source' */
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
extern void RandSrc_GZ_D(\
%assign comma = ""
%<comma>real_T y[]\
%assign comma = ", "
%<comma>const real_T mean[]\
%assign comma = ", "
%<comma>int32_T meanLen\
%assign comma = ", "
%<comma>const real_T xstd[]\
%assign comma = ", "
%<comma>int32_T xstdLen\
%assign comma = ", "
%<comma>uint32_T state[]\
%assign comma = ", "
%<comma>int32_T nChans\
%assign comma = ", "
%<comma>int32_T nSamps\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 1, fcnProtoType)>
%return fcnBuff
%endfunction

%function MWSPCGlmsnw_D_Fcn2(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int32_T i;
int32_T j;
real_T bufEnergy;
int32_T j1;
/* {S!d44}S-Function (sdsplms): '<Root>/LMS Filter' */
for (i = 0; i < xLen; i++) {
    y[i] = 0.0;
}
for (i = 0; i < xLen; i++) {
    bufEnergy = 0.0;
    /* Copy the current sample at the END of the circular buffer and update BuffStartIdx
 */
    xBuf[*startIdx] = x[i];
    (*startIdx)++;
    if (*startIdx == static_cast<uint32_T>(wLen)) {
        *startIdx = 0U;
    }
    /* Multiply wgtBuff_vector (not yet updated) and inBuff_vector
 */
    /* Get the energy of the signal in updated buffer
 */
    j1 = 0;
    for (j = static_cast<int32_T>(*startIdx); j < wLen; j++) {
        y[i] += wBuf[j1] * xBuf[j];
        bufEnergy += xBuf[j] * xBuf[j];
        j1++;
    }
    for (j = 0; j < static_cast<int32_T>(*startIdx); j++) {
        y[i] += wBuf[j1] * xBuf[j];
        bufEnergy += xBuf[j] * xBuf[j];
        j1++;
    }
    /* Ger error for the current sample
 */
    eY[i] = d[i] - y[i];
    /* Update weight-vector for next input sample
 */
    j1 = 0;
    for (j = static_cast<int32_T>(*startIdx); j < wLen; j++) {
        wBuf[j1] = xBuf[j] / (bufEnergy + 2.2204460492503131E-16) * eY[i] * mu + leakFac * wBuf[j1];
        j1++;
    }
    for (j = 0; j < static_cast<int32_T>(*startIdx); j++) {
        wBuf[j1] = xBuf[j] / (bufEnergy + 2.2204460492503131E-16) * eY[i] * mu + leakFac * wBuf[j1];
        j1++;
    }
}
j1 = wLen;
for (j = 0; j < wLen; j++) {
    wY[j] = wBuf[j1 - 1];
    j1--;
}
/* {E!d44}End of S-Function (sdsplms): '<Root>/LMS Filter' */
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
extern void MWSPCGlmsnw_D(\
%assign comma = ""
%<comma>const real_T x[]\
%assign comma = ", "
%<comma>const real_T d[]\
%assign comma = ", "
%<comma>real_T mu\
%assign comma = ", "
%<comma>uint32_T *startIdx\
%assign comma = ", "
%<comma>real_T xBuf[]\
%assign comma = ", "
%<comma>real_T wBuf[]\
%assign comma = ", "
%<comma>int32_T wLen\
%assign comma = ", "
%<comma>real_T leakFac\
%assign comma = ", "
%<comma>int32_T xLen\
%assign comma = ", "
%<comma>real_T y[]\
%assign comma = ", "
%<comma>real_T eY[]\
%assign comma = ", "
%<comma>real_T wY[]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 2, fcnProtoType)>
%return fcnBuff
%endfunction

%function ex_codegen_d_SystemCore_release_Fcn3(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
if (obj->isInitialized == 1) {
    obj->isInitialized = 2;
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void ex_codegen_d_SystemCore_release(\
%assign comma = ""
%<comma>b_dspcodegen_FIRFilter_ex_cod_T *obj\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 3, fcnProtoType)>
%return fcnBuff
%endfunction

%function ex_c_LPHPFilterBase_releaseImpl_Fcn4(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
%assign _modelSS = ""

%if SLibCG_FcnCallArgAccessed(0,4,0,0)
%<SLibCG_AccessArg(0 ,4, 0)>
%endif

%<(SLibCGCallSubFcn("ex_codegen_d_SystemCore_release", ["obj->FilterObj"], 0, 4, 0))>;
obj->NumChannels = -1;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void ex_c_LPHPFilterBase_releaseImpl(\
%assign comma = ""
%<comma>dsp_LowpassFilter_ex_codegen__T *obj\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 4, fcnProtoType)>
%return fcnBuff
%endfunction

%function ex_co_SystemCore_releaseWrapper_Fcn5(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
%assign _modelSS = ""

%if SLibCG_FcnCallArgAccessed(0,5,0,0)
%<SLibCG_AccessArg(0 ,5, 0)>
%endif

if (obj->isSetupComplete) {
    %<(SLibCGCallSubFcn("ex_c_LPHPFilterBase_releaseImpl", ["obj"], 0, 5, 0))>;
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void ex_co_SystemCore_releaseWrapper(\
%assign comma = ""
%<comma>dsp_LowpassFilter_ex_codegen__T *obj\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 5, fcnProtoType)>
%return fcnBuff
%endfunction

%function ex_codegen_SystemCore_release_l_Fcn6(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
%assign _modelSS = ""

%if SLibCG_FcnCallArgAccessed(0,6,0,0)
%<SLibCG_AccessArg(0 ,6, 0)>
%endif

if (obj->isInitialized == 1) {
    %<(SLibCGCallSubFcn("ex_co_SystemCore_releaseWrapper", ["obj"], 0, 6, 0))>;
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void ex_codegen_SystemCore_release_l(\
%assign comma = ""
%<comma>dsp_LowpassFilter_ex_codegen__T *obj\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 6, fcnProtoType)>
%return fcnBuff
%endfunction

%function ex_codegen__SystemCore_delete_l_Fcn7(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
%assign _modelSS = ""

%if SLibCG_FcnCallArgAccessed(0,7,0,0)
%<SLibCG_AccessArg(0 ,7, 0)>
%endif

%<(SLibCGCallSubFcn("ex_codegen_SystemCore_release_l", ["obj"], 0, 7, 0))>;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void ex_codegen__SystemCore_delete_l(\
%assign comma = ""
%<comma>dsp_LowpassFilter_ex_codegen__T *obj\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 7, fcnProtoType)>
%return fcnBuff
%endfunction

%function matlabCodegenHandle_matlabCod_l_Fcn8(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
%assign _modelSS = ""

%if SLibCG_FcnCallArgAccessed(0,8,0,0)
%<SLibCG_AccessArg(0 ,8, 0)>
%endif

if (!obj->matlabCodegenIsDeleted) {
    obj->matlabCodegenIsDeleted = true;
    %<(SLibCGCallSubFcn("ex_codegen__SystemCore_delete_l", ["obj"], 0, 8, 0))>;
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void matlabCodegenHandle_matlabCod_l(\
%assign comma = ""
%<comma>dsp_LowpassFilter_ex_codegen__T *obj\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 8, fcnProtoType)>
%return fcnBuff
%endfunction

%function ex_codegen_ds_SystemCore_delete_Fcn9(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
%assign _modelSS = ""

%if SLibCG_FcnCallArgAccessed(0,9,0,0)
%<SLibCG_AccessArg(0 ,9, 0)>
%endif

%<(SLibCGCallSubFcn("ex_codegen_d_SystemCore_release", ["obj"], 0, 9, 0))>;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void ex_codegen_ds_SystemCore_delete(\
%assign comma = ""
%<comma>b_dspcodegen_FIRFilter_ex_cod_T *obj\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 9, fcnProtoType)>
%return fcnBuff
%endfunction

%function matlabCodegenHandle_matlabCodeg_Fcn10(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
%assign _modelSS = ""

%if SLibCG_FcnCallArgAccessed(0,10,0,0)
%<SLibCG_AccessArg(0 ,10, 0)>
%endif

if (!obj->matlabCodegenIsDeleted) {
    obj->matlabCodegenIsDeleted = true;
    %<(SLibCGCallSubFcn("ex_codegen_ds_SystemCore_delete", ["obj"], 0, 10, 0))>;
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void matlabCodegenHandle_matlabCodeg(\
%assign comma = ""
%<comma>b_dspcodegen_FIRFilter_ex_cod_T *obj\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 10, fcnProtoType)>
%return fcnBuff
%endfunction

